S_IFMT = 0o170000
S_IFSOCK = 0o140000
S_IFLNK = 0o120000
S_IFREG = 0o100000
S_IFBLK = 0o060000
S_IFDIR = 0o040000
S_IFCHR = 0o020000
S_IFIFO = 0o010000
S_ISUID = 0o004000
S_ISGID = 0o002000
S_ISVTX = 0o001000
S_IRWXU = 0o0700
S_IRUSR = 0o0400
S_IWUSR = 0o0200
S_IXUSR = 0o0100
S_IRWXG = 0o0070
S_IRGRP = 0o0040
S_IWGRP = 0o0020
S_IXGRP = 0o0010
S_IRWXO = 0o0007
S_IROTH = 0o0004
S_IWOTH = 0o0002
S_IXOTH = 0o0001


# TODO: Put this somewhere or make it a builtin?
def oct(n):
    if n == 0:
        return '0'

    result = ''
    while n > 0:
        remainder = n % 8
        result = str(remainder) + result
        n //= 8

    return result


# TODO: Find a way to do this without overlapping with the stat function
class struct_stat():
    def __init__(self):
        self.st_dev = None
        self.st_ino = None
        self.st_mode = None
        self.st_nlink = None
        self.st_uid = None
        self.st_gid = None
        self.st_rdev = None
        self.st_size = None
        self.st_blksize = None
        self.st_blocks = None
        self.st_atim = None
        self.st_mtim = None
        self.st_ctim = None


def mkdir(pathname, mode):
    return _syscall(83, pathname, mode)


def stat(pathname):
    result = _syscall(4, pathname)

    # Populate the stat object
    # TODO: Catch errors
    if len(result) != 13:
        print(f"Failed: Our len is: {len(result)}")
        return None

    res_obj = struct_stat()
    res_obj.st_dev = int(result[0])
    res_obj.st_ino = int(result[1])
    res_obj.st_mode = int(result[2])
    res_obj.st_nlink = int(result[3])
    res_obj.st_uid = int(result[4])
    res_obj.st_gid = int(result[5])
    res_obj.st_rdev = result[6]
    res_obj.st_size = int(result[7])
    res_obj.st_blksize = result[8]
    res_obj.st_blocks = result[9]
    res_obj.st_atim = result[10]
    res_obj.st_mtim = result[11]
    res_obj.st_ctim = result[12]

    return res_obj

def S_ISREG(mode):
    return int(mode) & S_IFREG == S_IFREG

def S_ISDIR(mode):
    return int(mode) & S_IFDIR == S_IFDIR

def S_ISLNK(mode):
    return int(mode) & S_IFLNK == S_IFLNK