# Original source code:
# https://github.com/Birdabo404/suifetch
# (I will be using this as reference to make my own
# simplified neofetch clone for testing/example purposes)

require("stdio")
require("unistd")
require("stdlib")
require("fcntl")


def main(args):
    ascii_art = "|\\---/|\n| o_o |\n \\_^_/"
    print(ascii_art)

    fd = open("/etc/os-release", O_RDONLY)

    if fd < 0:
        perror("Unable to read OS release file")
        return 1

    result = read(fd)

    if result is None:
        perror("Unable to read OS release file")
        return 1

    lines = result.split("\n")

    OS_NAME = "os: "

    # Find the line that starts with "PRETTY_NAME="
    for line in lines:
        if line.startswith("PRETTY_NAME="):
            OS_NAME += line.split("=")[1].replace('"', "")
            break
    else:
        OS_NAME = "OS Information not available!"

    close(fd)

    print(OS_NAME)

    username = getenv("USER")
    print(f"username: {username}")

    shell = getenv("SHELL")
    print(f"shell: {shell}")

    term = getenv("TERM")
    print(f"term: {term}")

    fd = open("/proc/uptime", O_RDONLY)
    
    if fd < 0:
        perror("Failed to open /proc/uptime")
        return 1

    read_result = read(fd)

    if read_result is None:
        perror("Failed to read /proc/uptime")
        close(fd)
        return 1

    close(fd)

    # Due to limitations of pocketpy, we need to remove the decimal place manually
    parsed_seconds = int(read_result.split(".")[0])
    
    hours = int(parsed_seconds/3600)
    minutes = int((parsed_seconds % 3600) / 60)
    # seconds = int((parsed_seconds % 3600) % 3600)
    
    # TODO: Implement seconds correctly (rn it goes > 60 seconds)
    # print(f"uptime: {hours} hour{'s' if hours != 1 else ''}, {minutes} minute{'s' if minutes != 1 else ''}, {seconds} second{'s' if seconds != 1 else ''}")
    print(f"uptime: {hours} hour{'s' if hours != 1 else ''}, {minutes} minute{'s' if minutes != 1 else ''}")

    return 0
