require("stdlib")
require("unistd")
require("stdio")
require("pwd")
require("sys/utsname")
require("stdlib")

aliases = {}


# Define the functions for the builtins
def export(args):
    if len(args) < 1:
        print("TODO: Print the environ (just like how 'env' does)")
        pass
    else:
        key, value = args[0].split("=")
        setenv(key, value)


def cd(args):
    if len(args) < 1:
        # TODO: Don't assume '$HOME' is set
        args = [getenv("HOME")]

    if chdir(args[0]) != 0:
        perror("cd")


def alias(args):
    if len(args) < 1:
        print("TODO: Print all of the aliases")
        return

    argstr = " ".join(args[0:])
    if "=" not in argstr:
        print("sh: invalid alias")

    split_args = argstr.split("=")

    if len(split_args) < 2:
        print("sh: invalid alias")

    alias_name = split_args.pop(0)
    alias_cmd = " ".join(split_args)
    # TODO: ik that if the alias content isn't in quotes, it only takes the first
    #       word before the space, but I'm too lazy to implement that right now
    aliases[alias_name] = alias_cmd


def unalias(args):
    if len(args) < 1:
        print("unalias: not enough arguments")
        return

    if args[0] not in aliases:
        print(f"unalias: no such hash table element: {args[0]}")
    else:
        aliases.pop(args[0])


def echo(args):
    print(" ".join(args))


builtins = {
    "export": export,
    "cd": cd,
    "alias": alias,
    "unalias": unalias,
    "echo": echo
}


def main(argv):
    uid = geteuid()

    entry = getpwuid(uid)

    uname_res = uname()

    if uname_res == None:
        hostname = "<hostname>"
    else:
        hostname = uname_res.nodename

    if entry is None:
        username = "I have no name!"
    else:
        username = entry.pw_name
        setenv("USER", username)
        setenv("HOME", entry.pw_dir)

    setenv("SHELL", "sh")
    setenv("TERM", "tty0")  # TODO: Don't set this here, just for testing

    while True:
        prompt = getenv("PS1") or f"{username}@{hostname}{'#' if uid == 0 else '$'} "
        result = input(prompt)

        if result == "": continue

        if result == "exit": return 0

        # Split the result
        args = result.split(" ")

        # Check for aliases first
        if args[0] in aliases:
            args[0] = aliases[args[0]]

        # Check for built-ins
        if args[0] in builtins:
            builtins[args[0]](args[1:])

        # Finally, just try to execute a binary
        else:
            if result[0] == "/":
                # Abs path to executable
                if execve(args[0], args[1:], {}) < 0:
                    perror(f"sh: {args[0]}")
            else:
                # TODO: This is not going to work in the long run, but its 3:20am and it works for now
                if args[0] in aliases:
                    args[0] = aliases[args[0]]

                path = getenv("PATH") or "/bin"
                pieces = path.split(":")

                found_command = False

                for piece in pieces:
                    entries = getdents(piece)
                    for entry in entries:
                        if entry == args[0]:
                            if execve(f"{piece}/{args[0]}", args[1:], {}) < 0:
                                perror(f"sh: {args[0]}")
                            found_command = True
                            break

                if not found_command:
                    print(f"sh: command not found '{args[0]}'")
