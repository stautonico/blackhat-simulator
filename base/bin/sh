require("stdlib")
require("unistd")
require("stdio")
require("pwd")
require("sys/utsname")
require("stdlib")


aliases = {}

def main(argv):
    uid = geteuid()

    entry = getpwuid(uid)

    uname_res = uname()

    if uname_res == None:
        hostname = "<hostname>"
    else:
        hostname = uname_res.nodename

    if entry is None:
        username = "I have no name!"
    else:
        username = entry.pw_name
        setenv("USER", username)


    setenv("SHELL", "sh")
    setenv("TERM", "tty0") # TODO: Don't set this here, just for testing


    while True:
        prompt = getenv("PS1") or f"{username}@{hostname}{'#' if uid == 0 else '$'} "
        result = input(prompt)

        if result == "": continue

        if result == "exit": return 0

        # Split the result
        args = result.split(" ")

        # Built-ins
        if args[0] == "export":
            key, value = args[1].split("=")
            setenv(key, value)
        elif args[0] == "cd":
            if chdir(args[1]) != 0:
                perror("cd")
        elif args[0] == "alias":
            argstr = " ".join(args[1:])
            if "=" not in argstr:
                print("sh: invalid alias")
                continue

            split_args = argstr.split("=")

            if len(split_args) < 2:
                print("sh: invalid alias")
                continue

            alias_name = split_args.pop(0)
            alias_cmd = " ".join(split_args)

            # TODO: ik that if the alias content isn't in quotes, it only takes the first
            #       word before the space, but I'm too lazy to implement that right now
            aliases[alias_name] = alias_cmd
        elif args[0] == "unalias":
            if args[1] not in aliases:
                print(f"unalias: no such hash table element: {args[1]}")
            else:
                aliases.pop(args[1])

        else:
            if result[0] == "/":
                # Abs path to executable
                if execve(args[0], args[1:], {}) < 0:
                    perror(f"sh: {args[0]}")
            else:
                # TODO: This is not going to work in the long run, but its 3:20am and it works for now
                if args[0] in aliases:
                    args[0] = aliases[args[0]]

                path = getenv("PATH") or "/bin"
                pieces = path.split(":")

                found_command = False

                for piece in pieces:
                    entries = getdents(piece)
                    for entry in entries:
                        if entry == args[0]:
                            if execve(f"{piece}/{args[0]}", args[1:], {}) < 0:
                                perror(f"sh: {args[0]}")
                            found_command = True
                            break

                if not found_command:
                    print(f"sh: command not found '{args[0]}'")
